local Compkiller = loadstring(game:HttpGet("https://raw.githubusercontent.com/4lpaca-pin/CompKiller/refs/heads/main/src/source.luau"))();

local player = game:GetService("Players").LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
local TweenService = game:GetService("TweenService")
local vim = game:GetService("VirtualInputManager")

-- Toggle Button GUI
local ToggleGui = Instance.new("ScreenGui")
ToggleGui.Name = "ToggleGui"
ToggleGui.Parent = playerGui
ToggleGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ToggleGui.ResetOnSpawn = false

local Toggle = Instance.new("TextButton")
Toggle.Name = "Toggle"
Toggle.Parent = ToggleGui
Toggle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Toggle.TextColor3 = Color3.fromRGB(30, 30, 30)
Toggle.Position = UDim2.new(0.02, 0, 0.45, 0)
Toggle.Size = UDim2.new(0, 100, 0, 40)
Toggle.Text = "Close GUI"
Toggle.Font = Enum.Font.GothamMedium
Toggle.TextSize = 16
Toggle.AutoButtonColor = false
Toggle.Draggable = true

local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 12)
UICorner.Parent = Toggle

local UIStroke = Instance.new("UIStroke")
UIStroke.Color = Color3.fromRGB(220, 220, 220)
UIStroke.Thickness = 1.4
UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
UIStroke.Parent = Toggle

local isOpen = true

local function hover(on)
    local targetColor = on and Color3.fromRGB(245, 245, 245) or Color3.fromRGB(255, 255, 255)
    TweenService:Create(Toggle, TweenInfo.new(0.15, Enum.EasingStyle.Sine), {BackgroundColor3 = targetColor}):Play()
end

Toggle.MouseEnter:Connect(function() hover(true) end)
Toggle.MouseLeave:Connect(function() hover(false) end)

Toggle.MouseButton1Click:Connect(function()
    isOpen = not isOpen
    Toggle.Text = isOpen and "Close GUI" or "Open GUI"
    vim:SendKeyEvent(true, Enum.KeyCode.LeftAlt, false, game)
    task.wait(0.05)
    vim:SendKeyEvent(false, Enum.KeyCode.LeftAlt, false, game)
end)

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera

-- Notification
local Notifier = Compkiller.newNotify();

-- Config Manager
local ConfigManager = Compkiller:ConfigManager({
    Directory = "Compkiller-UI",
    Config = "Aimbot-Configs"
});

Compkiller:Loader("rbxassetid://71610633224812", 2.5).yield();

-- Creating Window
local Window = Compkiller.new({
    Name = "Aimbot Script",
    Keybind = "LeftAlt",
    Logo = "rbxassetid://71610633224812",
    Scale = Compkiller.Scale.Window,
    TextSize = 15,
});

-- Welcome Notification
Notifier.new({
    Title = "Aimbot Script",
    Content = "Loaded Successfully!",
    Duration = 5,
    Icon = "rbxassetid://71610633224812"
});

-- Watermark
local Watermark = Window:Watermark();

Watermark:AddText({
    Icon = "user",
    Text = LocalPlayer.Name,
});

Watermark:AddText({
    Icon = "clock",
    Text = Compkiller:GetDate(),
});

local Time = Watermark:AddText({
    Icon = "timer",
    Text = "TIME",
});

task.spawn(function()
    while true do task.wait()
        Time:SetText(Compkiller:GetTimeNow());
    end
end)

Watermark:AddText({
    Icon = "server",
    Text = Compkiller.Version,
});

-- ==================== MAIN CATEGORY ====================
Window:DrawCategory({
    Name = "Combat"
});

-- ==================== AIMBOT TAB ====================
local AimbotTab = Window:DrawTab({
    Name = "Aimbot",
    Icon = "crosshair",
    EnableScrolling = true
});

local AimbotSection = AimbotTab:DrawSection({
    Name = "Aimbot Settings",
    Position = 'left'
});

local function StringToEnum(key)
    if key == "MB1" or key == "MouseLeft" or key == "MouseButton1" then 
        return Enum.UserInputType.MouseButton1 
    end
    if key == "MB2" or key == "MouseRight" or key == "MouseButton2" then 
        return Enum.UserInputType.MouseButton2 
    end
    if key == "MB3" or key == "MouseMiddle" or key == "MouseButton3" then 
        return Enum.UserInputType.MouseButton3 
    end
    local success, keyCode = pcall(function()
        return Enum.KeyCode[key]
    end)
    
    if success and keyCode then
        return keyCode
    end
    return Enum.UserInputType.MouseButton2
end

-- Aimbot Variables
getgenv().aimbot = false
getgenv().selectpart = "Head"
getgenv().aimbotkeybind = Enum.UserInputType.MouseButton2
getgenv().aimbotmode = "Toggle"
getgenv().localPlayerName = LocalPlayer.Name
getgenv().maxdistance = 100
getgenv().aimsmooth = 0.5


local function GetAllPlayerModels()
    local playerModels = {}
    for _, obj in pairs(Workspace:GetChildren()) do
        if obj:IsA("Model") and obj:FindFirstChild("HumanoidRootPart") and obj:FindFirstChild("Humanoid") then
            if obj.Name ~= getgenv().localPlayerName then
                table.insert(playerModels, obj)
            end
        end
    end
    return playerModels
end


local function GetClosestPlayer()
    local closestDist = math.huge
    local target = nil
    
    local playerModels = GetAllPlayerModels()
    local myCharacter = LocalPlayer.Character
    if not myCharacter or not myCharacter:FindFirstChild("HumanoidRootPart") then
        return nil
    end
    local myPos = myCharacter.HumanoidRootPart.Position
    
    for _, playerModel in pairs(playerModels) do
        local hrp = playerModel:FindFirstChild("HumanoidRootPart")
        local humanoid = playerModel:FindFirstChild("Humanoid")
        
        if hrp and humanoid and humanoid.Health > 0 then
            local distance = (hrp.Position - myPos).Magnitude
            
            if distance <= getgenv().maxdistance and distance < closestDist then
                closestDist = distance
                target = playerModel
            end
        end
    end
    
    return target
end



local function GetCrosshairScreenPosition()
    local crosshair = playerGui:FindFirstChild("CrossShair")
    if not crosshair then return nil end
    
    local frame = crosshair:FindFirstChild("Frame")
    if not frame then return nil end
    
    local absPos = frame.AbsolutePosition
    local absSize = frame.AbsoluteSize
    
    local centerX = absPos.X + (absSize.X / 2)
    local centerY = absPos.Y + (absSize.Y / 2)
    
    return Vector2.new(centerX, centerY)
end

local function AimCrosshairAtTarget(targetPosition)
    local crosshairScreenPos = GetCrosshairScreenPosition()
    if not crosshairScreenPos then return false end

    -- แปลง target position เป็น screen position
    local targetScreen, onScreen = Camera:WorldToViewportPoint(targetPosition)
    if not onScreen then return false end

    -- คำนวณ offset ระหว่าง target กับ crosshair (บน screen)
    local offsetX = targetScreen.X - crosshairScreenPos.X
    local offsetY = targetScreen.Y - crosshairScreenPos.Y

    -- คำนวณระยะทาง
    local camPos = Camera.CFrame.Position
    local distance = (targetPosition - camPos).Magnitude

    -- แปลง screen offset เป็นมุม
    local viewport = Camera.ViewportSize
    local angleX = math.atan2(offsetX, viewport.X) * 2
    local angleY = math.atan2(offsetY, viewport.Y) * 2

    -- หมุนกล้อง
    local newCF = Camera.CFrame * CFrame.Angles(-angleY, angleX, 0)
    Camera.CFrame = Camera.CFrame:Lerp(newCF, getgenv().aimsmooth)

    return true
end


local aimbotActive = false
local toggleState = false

local AimbotInfoParagraph = AimbotSection:AddParagraph({
    Title = "Aimbot Info",
    Content = "Target: None\nDistance: 0\nMode: Toggle"
})

task.spawn(function()
    while task.wait(0.1) do
        local target = GetClosestPlayer()
        local targetText = target and target.Name or "None"
        local distanceText = "0"
        
        if target then
            local myCharacter = LocalPlayer.Character
            if myCharacter and myCharacter:FindFirstChild("HumanoidRootPart") then
                local targetHRP = target:FindFirstChild("HumanoidRootPart")
                if targetHRP then
                    local distance = (targetHRP.Position - myCharacter.HumanoidRootPart.Position).Magnitude
                    distanceText = tostring(math.floor(distance))
                end
            end
        end
        
        local modeText = getgenv().aimbotmode
        
        pcall(function()
            AimbotInfoParagraph:SetContent(
                "Target: " .. targetText .. 
                "\nDistance: " .. distanceText .. " studs" ..
                "\nMode: " .. modeText
            )
        end)
    end
end)

local AimbotToggle = AimbotSection:AddToggle({
    Name = "Enable Aimbot",
    Flag = "Aimbot_Enable",
    Default = false,
    Callback = function(Value)
        getgenv().aimbot = Value
        aimbotActive = Value
        if not Value then
            toggleState = false
        end
    end,
})

local AimbotKey = AimbotToggle.Link:AddKeybind({
    Default = "MB2",
    Flag = "Aimbot_Keybind",
    Callback = function(key)
        getgenv().aimbotkeybind = StringToEnum(key)
        
        if getgenv().aimbotmode == "Toggle" then
            toggleState = not toggleState
        end
    end
})

AimbotSection:AddDropdown({
    Name = "Keybind Mode",
    Default = "Toggle",
    Flag = "Aimbot_Mode",
    Values = {"Toggle", "Hold", "Always"},
    Callback = function(Value)
        getgenv().aimbotmode = Value
        if Value == "Always" then
            Notifier.new({
                Title = "Warning",
                Content = "Always mode is not recommended!",
                Duration = 5,
                Icon = "rbxassetid://71610633224812"
            })
        end
    end
})

AimbotSection:AddDropdown({
    Name = "Target Part",
    Default = "Head",
    Flag = "Aimbot_Part",
    Values = {"Head", "UpperTorso", "LowerTorso", "HumanoidRootPart"},
    Callback = function(Value)
        getgenv().selectpart = Value
    end
})

AimbotSection:AddSlider({
    Name = "Max Distance (studs)",
    Min = 10,
    Max = 500,
    Default = 100,
    Round = 0,
    Flag = "Aimbot_Distance",
    Callback = function(Value)
        getgenv().maxdistance = Value
    end
});

AimbotSection:AddSlider({
    Name = "Aim Smoothness",
    Min = 0.1,
    Max = 1,
    Default = 0.5,
    Round = 1,
    Flag = "Aimbot_Smooth",
    Callback = function(Value)
        getgenv().aimsmooth = Value
    end
});

UserInputService.InputBegan:Connect(function(input, GPE)
    if GPE or not aimbotActive then return end
    
    local keybind = getgenv().aimbotkeybind
    local isPressed = false
    
    if keybind.EnumType == Enum.KeyCode then
        isPressed = (input.KeyCode == keybind)
    elseif keybind.EnumType == Enum.UserInputType then
        isPressed = (input.UserInputType == keybind)
    end
    
    if isPressed and getgenv().aimbotmode == "Toggle" then
        toggleState = not toggleState
    end
end)

RunService.Heartbeat:Connect(function()
    if not aimbotActive then 
        return 
    end
    
    local mode = getgenv().aimbotmode
    local keybind = getgenv().aimbotkeybind
    local shouldAim = false

    if mode == "Always" then
        shouldAim = true
    elseif mode == "Hold" then
        if keybind.EnumType == Enum.KeyCode then
            shouldAim = UserInputService:IsKeyDown(keybind)
        elseif keybind.EnumType == Enum.UserInputType then
            shouldAim = UserInputService:IsMouseButtonPressed(keybind)
        end
    elseif mode == "Toggle" then
        shouldAim = toggleState
    end
    
    if shouldAim then
        local target = GetClosestPlayer()
        if target then
            local targetPart = target:FindFirstChild(getgenv().selectpart)
            if targetPart then
                AimCrosshairAtTarget(targetPart.Position)
            end
        end
    end
end)

-- ==================== SETTINGS TAB ====================
Window:DrawCategory({
    Name = "Settings"
});

local SettingTab = Window:DrawTab({
    Icon = "settings",
    Name = "UI Settings",
    Type = "Single",
    EnableScrolling = true
});

local ThemeTab = Window:DrawTab({
    Icon = "paintbrush",
    Name = "Themes",
    Type = "Single"
});

local Settings = SettingTab:DrawSection({
    Name = "UI Customization",
});

Settings:AddToggle({
    Name = "Always Show Frame",
    Default = false,
    Callback = function(v)
        Window.AlwayShowTab = v;
    end,
});

Settings:AddColorPicker({
    Name = "Highlight",
    Default = Compkiller.Colors.Highlight,
    Callback = function(v)
        Compkiller.Colors.Highlight = v;
        Compkiller:RefreshCurrentColor();
    end,
});

Settings:AddColorPicker({
    Name = "Toggle Color",
    Default = Compkiller.Colors.Toggle,
    Callback = function(v)
        Compkiller.Colors.Toggle = v;
        Compkiller:RefreshCurrentColor(v);
    end,
});

Settings:AddColorPicker({
    Name = "Drop Color",
    Default = Compkiller.Colors.DropColor,
    Callback = function(v)
        Compkiller.Colors.DropColor = v;
        Compkiller:RefreshCurrentColor(v);
    end,
});

Settings:AddButton({
    Name = "Get Theme",
    Callback = function()
        print(Compkiller:GetTheme())
        
        Notifier.new({
            Title = "Notification",
            Content = "Copied Theme Color to clipboard",
            Duration = 5,
            Icon = "rbxassetid://71610633224812"
        });
    end,
});

ThemeTab:DrawSection({
    Name = "UI Themes"
}):AddDropdown({
    Name = "Select Theme",
    Default = "Default",
    Values = {
        "Default",
        "Dark Green",
        "Dark Blue",
        "Purple Rose",
        "Skeet"
    },
    Callback = function(v)
        Compkiller:SetTheme(v)
    end,
})

-- Creating Config Tab
local ConfigUI = Window:DrawConfig({
    Name = "Config",
    Icon = "folder",
    Config = ConfigManager
});

ConfigUI:Init();

print("Aimbot Script Loaded Successfully!")
